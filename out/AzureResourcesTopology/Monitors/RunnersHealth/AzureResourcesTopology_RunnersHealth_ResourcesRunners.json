{
  "bv": 10,
  "component": "RunnersHealth",
  "computedMetrics": null,
  "deleted": false,
  "description": null,
  "dimensions": null,
  "displayName": null,
  "enableClientEtwPublication": true,
  "enableClientSideForking": true,
  "enableClientSideLastSamplingMode": false,
  "enableClientSidePublication": true,
  "id": "ResourcesRunners",
  "isFromNewPipeline": false,
  "isQosMetric": false,
  "metrics": null,
  "monitors": [
    {
      "category": "",
      "conditions": [
        [
          "Environment",
          "*",
          "EUS2EUAP"
        ]
      ],
      "customLinks": [
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DGrepJarvisLink, Microsoft.Online.Metrics.Common",
          "autoExecute": true,
          "clientQuery": "orderby service asc\r\nwhere service == \"PartialSyncIngestionService\"\r\n//where properties != null && properties.containsi(\"RetryPriority=[Arm]\")\r\n\r\n\r\nlet action = Regex.Match(properties,\"\"\"action\"\": \"\"(.*?)\"\"\").groups[1].value\r\nlet SlimResourceType = Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r\nlet NeedDelayedRetry = Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r\nlet rg = Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r\n\r\nlet Resp_ContentLength = Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r\n\r\n\r\nlet put200 = (SlimResourceType == \"Microsoft.StreamAnalytics/streamingjobs\" and action == \"Write\" and rg == \"zarttestrgPut200\")\r\nlet Put202 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPut202\"\r\nlet Patch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPatch200\"\r\nlet Patch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\" and rg == \"zarttestrgPatch202\" \r\nlet Delete200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgDelete200\"\r\nlet Delete202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Delete\" and rg == \"zarttestrgDelete202\"\r\nlet FastPatch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgFastPatch200\"\r\nlet FastPatch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\"  and rg == \"zarttestrgFastPatch202\"\r\n\r\n//Move = storage + write + delete + zarttestrgsource and  zarttestrgtarget\r\nlet MoveW =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\"  and rg == \"zarttestrgtarget\"\r\nlet MoveD =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgsource\"\r\norderby Patch202 desc\r\nwhere !(put200 == False and Put202 == False and Patch200 == False and Patch202 == False and Delete200 == False and Delete202 == False and FastPatch200 == False and FastPatch202 == False and MoveW == False and MoveD == False)\r\n//where rg != null && rg.containsi(\"FastPatch202\")\r\n",
          "dGrepEndpoint": "https://dgrepv2-frontend-prod.trafficmanager.net/",
          "endpointAlias": "Diagnostics PROD",
          "endTime": "{EndTime}",
          "eventFilters": [
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityCompleted",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            }
          ],
          "eventInfos": null,
          "executionDelay": "00:01:00",
          "identityColumns": {
            "Environment": [
              "eus2euap",
              "Eus",
              "Sea",
              "Weu"
            ]
          },
          "jarvisPathAndQuery": "?page=logs&be=DGrep&time={EndTime}&offset=-20&offsetUnit=Minutes&ep=Diagnostics%20PROD&ns=ResourceTopology&en=ActivityCompleted&conditions=[[\"properties\",\"contains\",\"zarttestrg\"],[\"activityName\",\"==\",\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"]]&scopingConditions=[[\"Environment\",\"eus2euap,Eus,Sea,Weu\"]]&aggregatesVisible=true&aggregates=[\"Count%20by%20activityName\",\"Count%20by%20service\",\"Count%20by%20Environment\",\"Count%20by%20action\",\"Count%20by%20SlimResourceType\",\"Count%20by%20Resp_ContentLength\"]&chartsVisible=true&chartEditorVisible=true&chartType=Column&chartLayers=[[\"Put200\",\"where%20put200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Put202\",\"where%20Put202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch200\",\"where%20Patch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch202\",\"where%20Patch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete200\",\"where%20Delete200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete202\",\"where%20Delete202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch200\",\"where%20FastPatch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch202\",\"where%20FastPatch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveW\",\"where%20MoveW%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveD\",\"where%20MoveD%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"]]&UTC=false&clientQuery=orderby%20service%20asc\r%0Awhere%20service%20==%20\"PartialSyncIngestionService\"\r%0A//where%20properties%20!=%20null%20%26%26%20properties.containsi(\"RetryPriority=[Arm]\")\r%0A\r%0A\r%0Alet%20action%20=%20Regex.Match(properties,\"\"\"action\"\":%20\"\"(.*?)\"\"\").groups[1].value\r%0Alet%20SlimResourceType%20=%20Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r%0Alet%20NeedDelayedRetry%20=%20Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r%0Alet%20rg%20=%20Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r%0A\r%0Alet%20Resp_ContentLength%20=%20Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r%0A\r%0A\r%0Alet%20put200%20=%20(SlimResourceType%20==%20\"Microsoft.StreamAnalytics/streamingjobs\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut200\")\r%0Alet%20Put202%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut202\"\r%0Alet%20Patch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch200\"\r%0Alet%20Patch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch202\"%20\r%0Alet%20Delete200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete200\"\r%0Alet%20Delete202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete202\"\r%0Alet%20FastPatch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgFastPatch200\"\r%0Alet%20FastPatch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgFastPatch202\"\r%0A\r%0A//Move%20=%20storage%20+%20write%20+%20delete%20+%20zarttestrgsource%20and%20%20zarttestrgtarget\r%0Alet%20MoveW%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgtarget\"\r%0Alet%20MoveD%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgsource\"\r%0Aorderby%20Patch202%20desc\r%0Awhere%20!(put200%20==%20False%20and%20Put202%20==%20False%20and%20Patch200%20==%20False%20and%20Patch202%20==%20False%20and%20Delete200%20==%20False%20and%20Delete202%20==%20False%20and%20FastPatch200%20==%20False%20and%20FastPatch202%20==%20False%20and%20MoveW%20==%20False%20and%20MoveD%20==%20False)\r%0A//where%20rg%20!=%20null%20%26%26%20rg.containsi(\"FastPatch202\")\r%0A",
          "lookback": "00:20:00",
          "maxResultRowCount": 15,
          "maxRowCount": 500000,
          "mdsEndpoint": "https://production.diagnostics.monitoring.core.windows.net/",
          "preIncidentQueryTimeout": "00:00:50",
          "serverQuery": "(properties.ContainsI(\"zarttestrg\")) and (activityName.EqualsI(\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"))",
          "serverQuerySimpleConditions": [
            {
              "comparand": "properties",
              "operator": "contains",
              "values": "zarttestrg"
            },
            {
              "comparand": "activityName",
              "operator": "==",
              "values": "EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync"
            }
          ],
          "startTime": null,
          "stepback": "00:00:00",
          "title": "Runners Notifications",
          "type": "DGrep",
          "uxParameters": [
            {
              "key": "aggregatesVisible",
              "value": true
            },
            {
              "key": "aggregates",
              "value": [
                "Count by activityName",
                "Count by service",
                "Count by Environment",
                "Count by action",
                "Count by SlimResourceType",
                "Count by Resp_ContentLength"
              ]
            },
            {
              "key": "chartsVisible",
              "value": true
            },
            {
              "key": "chartEditorVisible",
              "value": true
            },
            {
              "key": "chartType",
              "value": "Column"
            },
            {
              "key": "chartLayers",
              "value": [
                [
                  "Put200",
                  "where put200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Put202",
                  "where Put202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch200",
                  "where Patch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch202",
                  "where Patch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete200",
                  "where Delete200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete202",
                  "where Delete202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch200",
                  "where FastPatch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch202",
                  "where FastPatch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveW",
                  "where MoveW == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveD",
                  "where MoveD == True\ngroupby Environment\nlet Count = Count()"
                ]
              ]
            },
            {
              "key": "UTC",
              "value": false
            }
          ]
        }
      ],
      "customMessage": "",
      "customTitle": "",
      "dashboardName": "",
      "dashboardNamespace": "",
      "description": "Trigger when no runners notification are reaching the region.\nLikely the region is down, and the traffic manager has switched the traffic to another region\n\nTSG:\n1. Check that it isn't false alarm.\nFor this use attached DGrep query to confirm that there is no successful activities in that time  \n\n2. Check Runners logs \nGo to Manage/Runners in jarvis portal\nRight click on runner and open \"Runner Logs\"\n\n3. Investigate failures of notification/query on ARG side",
      "desiredConditions": null,
      "eventIdentifier": {
        "component": "RunnersHealth",
        "id": "ResourcesRunners",
        "tenant": "AzureResourcesTopology"
      },
      "explicitPreAgg": null,
      "frequency": "00:20:00",
      "healthyCountToMitigateIncident": 3,
      "healthyDurationToMitigateIncident": "00:40:00",
      "hintsLookbackDuration": "1.00:00:00",
      "id": "NoRunnerReachingRegion",
      "ingestionDelay": "00:00:00",
      "inputResourceType": "",
      "isDisabled": true,
      "isRegularMonitor": true,
      "isSilent": false,
      "isThrottled": false,
      "lastUpdatedBy": "momihail",
      "lastUpdateTime": "2020-02-25T18:29:09.0581897Z",
      "lookbackDuration": "00:30:00",
      "metadata": [],
      "metricsViewName": "",
      "monitorActorConfiguration": {
        "additionalDataForMonitorsEnabled": false,
        "azureCacheTimeToExclude": "00:00:00",
        "baselineConcurrentGetAnomalyCallsV2": 0,
        "baselineFastServiceUri": null,
        "baselineFastServiceUriForAzure": null,
        "baselineIsAnomalyBatchProcessingSize": 0,
        "baselineServiceUri": null,
        "baselineServiceUriForAzure": null,
        "baselineServiceUseQueryService": false,
        "baselineUiFacingServiceUri": null,
        "baselineUiFacingServiceUriForAzure": null,
        "baseReportExpirationTimeInSeconds": 0,
        "batchReportingMonitor": false,
        "cacheTimeToExclude": "00:00:00",
        "cadMaxCombinationsEvaluationThreshold": 0,
        "certificateIdentifier": null,
        "certificateThumbprint": null,
        "combinationDeltaFetchLookback": "00:00:00",
        "combinationRefreshMinInterval": "00:00:00",
        "combinationsChunkSizePerConcurrentEvaluateBlock": 0,
        "consecutiveMonitorTimeoutsForAlerting": 0,
        "customizeSeverityForMonitorExecutionFailure": false,
        "debug": false,
        "disabled": false,
        "disableMetricDataInAlerts": false,
        "dqConcurrencyConfiguration": null,
        "dynamicThresholdMaxCombinationsEvaluationThreshold": 0,
        "enableCombinationsThrottlingForCad": false,
        "enableCostReporting": false,
        "enableDictionaryBasedMetricsSourceMatching": false,
        "enableGroupingByCommonDimensions": false,
        "enableHealthMonitors": false,
        "enableMonitorTimeoutAlerts": false,
        "enableQueryServiceQosMetricSupport": false,
        "enableSelectPreaggregate": false,
        "enableSubmitMetricsFromJs": false,
        "evaluatorTimeout": "00:00:00",
        "fetchDeltaHints": false,
        "hasUserConfigCacheTimeToExclude": null,
        "hintLookbackDuration": "00:00:00",
        "includeTimeSeriesInformationInWatchdogMetadata": false,
        "isThirdPartyStamp": false,
        "kenshoServiceUri": null,
        "logCombinationsInfo": false,
        "maxBufferSizeForRetrievedData": 0,
        "maxCombinationsCountPerPartition": 0,
        "maxCombinationsEvaluationThreshold": 0,
        "maxCombinationsForDataSources": 0,
        "maxCombinationsForMetricSources": 0,
        "maxConcurrentRetrieveOperations": 0,
        "maxDegreeOfParallelismForEvaluateBlock": 0,
        "maxFetchMetricsInJs": 0,
        "minCombinationsCountToRequirePartition": 0,
        "notQueryMetricsSourceCombinationIfNoWildcard": false,
        "overrideHealthDataValidation": false,
        "overrideMetricDataValidation": false,
        "partnerClientCertificateIdentifier": null,
        "preferMetricsStore": false,
        "preventCombinationsOverwriteByDeltaRefresh": false,
        "previewWithHistoricData": false,
        "removeExtraIngestionDelayInExecution": false,
        "removeExtraQueryComparison": false,
        "resourceTypeOverride": null,
        "treatInheritNotAsWildcard": false,
        "useAccountMigrationSupport": false,
        "useDefaultAzureMonitorLatency": false,
        "useHealthService": false,
        "useInternalHintingApi": false,
        "useLatestQueryRequestSerializationVersion": false,
        "useLowLatencyPipelineDataQualityForAzureMonitor": false,
        "useMetricsStoreMigrationSupport": false,
        "useNewHintingApi": false,
        "useNewMonitorTemplateInterface": false,
        "useNewMonitorTemplateInterfaceForDynamicThreshold": false,
        "useOptimizedMetricFetch": false,
        "useQueryServiceBatching": false,
        "useQueryServiceBatchingForJs": false,
        "useQueryServiceForCrossStampQuery": false,
        "useQueryServiceInMdmDataQualityClient": false,
        "useResolutionForAnomalyTimeWindowLookback": false,
        "zeroAsNoValueSentinel": false
      },
      "monitorDataSourceType": 0,
      "raiseIncientOnMonitorFailure": null,
      "resourceType": "Environment",
      "severityForMonitorFailure": 0,
      "shouldMitigateIncident": false,
      "shouldSendToAutomation": false,
      "templateSpecificParameters": {
        "metric": "Count"
      },
      "templateType": 2,
      "tenantName": "",
      "thresholds": [
        {
          "comparator": "==",
          "healthStatus": 1,
          "severity": 3,
          "value": 0.0
        }
      ],
      "version": 13
    },
    {
      "category": "",
      "conditions": [
        [
          "Environment",
          "EUS2EUAP",
          ""
        ],
        [
          "RunnerType",
          "*",
          ""
        ]
      ],
      "customLinks": [
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DGrepJarvisLink, Microsoft.Online.Metrics.Common",
          "autoExecute": false,
          "clientQuery": "orderby service asc\r\nwhere service == \"PartialSyncIngestionService\"\r\n//where properties != null && properties.containsi(\"RetryPriority=[Arm]\")\r\n\r\n\r\nlet action = Regex.Match(properties,\"\"\"action\"\": \"\"(.*?)\"\"\").groups[1].value\r\nlet SlimResourceType = Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r\nlet NeedDelayedRetry = Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r\nlet rg = Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r\n\r\nlet Resp_ContentLength = Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r\n\r\n\r\nlet put200 = (SlimResourceType == \"Microsoft.StreamAnalytics/streamingjobs\" and action == \"Write\" and rg == \"zarttestrgPut200\")\r\nlet Put202 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPut202\"\r\nlet Patch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPatch200\"\r\nlet Patch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\" and rg == \"zarttestrgPatch202\" \r\nlet Delete200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgDelete200\"\r\nlet Delete202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Delete\" and rg == \"zarttestrgDelete202\"\r\nlet FastPatch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgFastPatch200\"\r\nlet FastPatch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\"  and rg == \"zarttestrgFastPatch202\"\r\n\r\n//Move = storage + write + delete + zarttestrgsource and  zarttestrgtarget\r\nlet MoveW =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\"  and rg == \"zarttestrgtarget\"\r\nlet MoveD =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgsource\"\r\norderby PreciseTimeStamp asc\r\nwhere !(put200 == False and Put202 == False and Patch200 == False and Patch202 == False and Delete200 == False and Delete202 == False and FastPatch200 == False and FastPatch202 == False and MoveW == False and MoveD == False)\r\n//where rg != null && rg.containsi(\"FastPatch202\")\r\n",
          "dGrepEndpoint": "https://dgrepv2-frontend-prod.trafficmanager.net/",
          "endpointAlias": "Diagnostics PROD",
          "endTime": "{EndTime}",
          "eventFilters": [
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityCompleted",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            }
          ],
          "eventInfos": null,
          "executionDelay": "00:01:00",
          "identityColumns": {
            "Environment": [
              "eus2euap"
            ]
          },
          "jarvisPathAndQuery": "?page=logs&be=DGrep&time={EndTime}&offset=-1&offsetUnit=Hours&ep=Diagnostics%20PROD&ns=ResourceTopology&en=ActivityCompleted&conditions=[[\"properties\",\"contains\",\"zarttestrg\"],[\"activityName\",\"==\",\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"]]&scopingConditions=[[\"Environment\",\"eus2euap\"]]&aggregatesVisible=true&aggregates=[\"Count%20by%20activityName\",\"Count%20by%20service\",\"Count%20by%20Environment\",\"Count%20by%20action\",\"Count%20by%20SlimResourceType\",\"Count%20by%20Resp_ContentLength\"]&chartsVisible=true&chartEditorVisible=true&chartType=Column&chartLayers=[[\"Put200\",\"where%20put200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Put202\",\"where%20Put202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch200\",\"where%20Patch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch202\",\"where%20Patch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete200\",\"where%20Delete200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete202\",\"where%20Delete202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch200\",\"where%20FastPatch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch202\",\"where%20FastPatch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveW\",\"where%20MoveW%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveD\",\"where%20MoveD%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"]]&UTC=false&clientQuery=orderby%20service%20asc\r%0Awhere%20service%20==%20\"PartialSyncIngestionService\"\r%0A//where%20properties%20!=%20null%20%26%26%20properties.containsi(\"RetryPriority=[Arm]\")\r%0A\r%0A\r%0Alet%20action%20=%20Regex.Match(properties,\"\"\"action\"\":%20\"\"(.*?)\"\"\").groups[1].value\r%0Alet%20SlimResourceType%20=%20Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r%0Alet%20NeedDelayedRetry%20=%20Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r%0Alet%20rg%20=%20Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r%0A\r%0Alet%20Resp_ContentLength%20=%20Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r%0A\r%0A\r%0Alet%20put200%20=%20(SlimResourceType%20==%20\"Microsoft.StreamAnalytics/streamingjobs\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut200\")\r%0Alet%20Put202%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut202\"\r%0Alet%20Patch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch200\"\r%0Alet%20Patch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch202\"%20\r%0Alet%20Delete200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete200\"\r%0Alet%20Delete202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete202\"\r%0Alet%20FastPatch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgFastPatch200\"\r%0Alet%20FastPatch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgFastPatch202\"\r%0A\r%0A//Move%20=%20storage%20+%20write%20+%20delete%20+%20zarttestrgsource%20and%20%20zarttestrgtarget\r%0Alet%20MoveW%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgtarget\"\r%0Alet%20MoveD%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgsource\"\r%0Aorderby%20PreciseTimeStamp%20asc\r%0Awhere%20!(put200%20==%20False%20and%20Put202%20==%20False%20and%20Patch200%20==%20False%20and%20Patch202%20==%20False%20and%20Delete200%20==%20False%20and%20Delete202%20==%20False%20and%20FastPatch200%20==%20False%20and%20FastPatch202%20==%20False%20and%20MoveW%20==%20False%20and%20MoveD%20==%20False)\r%0A//where%20rg%20!=%20null%20%26%26%20rg.containsi(\"FastPatch202\")\r%0A",
          "lookback": "01:00:00",
          "maxResultRowCount": 15,
          "maxRowCount": 500000,
          "mdsEndpoint": "https://production.diagnostics.monitoring.core.windows.net/",
          "preIncidentQueryTimeout": "00:00:50",
          "serverQuery": "(properties.ContainsI(\"zarttestrg\")) and (activityName.EqualsI(\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"))",
          "serverQuerySimpleConditions": [
            {
              "comparand": "properties",
              "operator": "contains",
              "values": "zarttestrg"
            },
            {
              "comparand": "activityName",
              "operator": "==",
              "values": "EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync"
            }
          ],
          "startTime": null,
          "stepback": "00:00:00",
          "title": "Runners notification in euap",
          "type": "DGrep",
          "uxParameters": [
            {
              "key": "aggregatesVisible",
              "value": true
            },
            {
              "key": "aggregates",
              "value": [
                "Count by activityName",
                "Count by service",
                "Count by Environment",
                "Count by action",
                "Count by SlimResourceType",
                "Count by Resp_ContentLength"
              ]
            },
            {
              "key": "chartsVisible",
              "value": true
            },
            {
              "key": "chartEditorVisible",
              "value": true
            },
            {
              "key": "chartType",
              "value": "Column"
            },
            {
              "key": "chartLayers",
              "value": [
                [
                  "Put200",
                  "where put200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Put202",
                  "where Put202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch200",
                  "where Patch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch202",
                  "where Patch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete200",
                  "where Delete200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete202",
                  "where Delete202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch200",
                  "where FastPatch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch202",
                  "where FastPatch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveW",
                  "where MoveW == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveD",
                  "where MoveD == True\ngroupby Environment\nlet Count = Count()"
                ]
              ]
            },
            {
              "key": "UTC",
              "value": false
            }
          ]
        },
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DGrepJarvisLink, Microsoft.Online.Metrics.Common",
          "autoExecute": false,
          "clientQuery": "orderby service asc\r\nwhere service == \"PartialSyncIngestionService\"\r\n//where properties != null && properties.containsi(\"RetryPriority=[Arm]\")\r\n\r\n\r\nlet action = Regex.Match(properties,\"\"\"action\"\": \"\"(.*?)\"\"\").groups[1].value\r\nlet SlimResourceType = Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r\nlet NeedDelayedRetry = Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r\nlet rg = Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r\n\r\nlet Resp_ContentLength = Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r\n\r\n\r\nlet put200 = (SlimResourceType == \"Microsoft.StreamAnalytics/streamingjobs\" and action == \"Write\" and rg == \"zarttestrgPut200\")\r\nlet Put202 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPut202\"\r\nlet Patch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPatch200\"\r\nlet Patch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\" and rg == \"zarttestrgPatch202\" \r\nlet Delete200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgDelete200\"\r\nlet Delete202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Delete\" and rg == \"zarttestrgDelete202\"\r\nlet FastPatch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgFastPatch200\"\r\nlet FastPatch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\"  and rg == \"zarttestrgFastPatch202\"\r\n\r\n//Move = storage + write + delete + zarttestrgsource and  zarttestrgtarget\r\nlet MoveW =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\"  and rg == \"zarttestrgtarget\"\r\nlet MoveD =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgsource\"\r\norderby PreciseTimeStamp asc\r\nwhere !(put200 == False and Put202 == False and Patch200 == False and Patch202 == False and Delete200 == False and Delete202 == False and FastPatch200 == False and FastPatch202 == False and MoveW == False and MoveD == False)\r\n//where rg != null && rg.containsi(\"FastPatch202\")\r\n",
          "dGrepEndpoint": "https://dgrepv2-frontend-prod.trafficmanager.net/",
          "endpointAlias": "Diagnostics PROD",
          "endTime": "{EndTime}",
          "eventFilters": [
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityCompleted",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            }
          ],
          "eventInfos": null,
          "executionDelay": "00:01:00",
          "identityColumns": {
            "Environment": [
              "eus2euap"
            ]
          },
          "jarvisPathAndQuery": "?page=logs&be=DGrep&time={EndTime}&offset=-1&offsetUnit=Hours&ep=Diagnostics%20PROD&ns=ResourceTopology&en=ActivityCompleted&conditions=[[\"properties\",\"contains\",\"zarttestrg\"],[\"activityName\",\"==\",\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"]]&scopingConditions=[[\"Environment\",\"eus2euap\"]]&aggregatesVisible=true&aggregates=[\"Count%20by%20activityName\",\"Count%20by%20service\",\"Count%20by%20Environment\",\"Count%20by%20action\",\"Count%20by%20SlimResourceType\",\"Count%20by%20Resp_ContentLength\"]&chartsVisible=true&chartEditorVisible=true&chartType=Column&chartLayers=[[\"Put200\",\"where%20put200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Put202\",\"where%20Put202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch200\",\"where%20Patch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch202\",\"where%20Patch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete200\",\"where%20Delete200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete202\",\"where%20Delete202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch200\",\"where%20FastPatch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch202\",\"where%20FastPatch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveW\",\"where%20MoveW%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveD\",\"where%20MoveD%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"]]&UTC=false&clientQuery=orderby%20service%20asc\r%0Awhere%20service%20==%20\"PartialSyncIngestionService\"\r%0A//where%20properties%20!=%20null%20%26%26%20properties.containsi(\"RetryPriority=[Arm]\")\r%0A\r%0A\r%0Alet%20action%20=%20Regex.Match(properties,\"\"\"action\"\":%20\"\"(.*?)\"\"\").groups[1].value\r%0Alet%20SlimResourceType%20=%20Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r%0Alet%20NeedDelayedRetry%20=%20Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r%0Alet%20rg%20=%20Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r%0A\r%0Alet%20Resp_ContentLength%20=%20Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r%0A\r%0A\r%0Alet%20put200%20=%20(SlimResourceType%20==%20\"Microsoft.StreamAnalytics/streamingjobs\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut200\")\r%0Alet%20Put202%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut202\"\r%0Alet%20Patch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch200\"\r%0Alet%20Patch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch202\"%20\r%0Alet%20Delete200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete200\"\r%0Alet%20Delete202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete202\"\r%0Alet%20FastPatch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgFastPatch200\"\r%0Alet%20FastPatch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgFastPatch202\"\r%0A\r%0A//Move%20=%20storage%20+%20write%20+%20delete%20+%20zarttestrgsource%20and%20%20zarttestrgtarget\r%0Alet%20MoveW%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgtarget\"\r%0Alet%20MoveD%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgsource\"\r%0Aorderby%20PreciseTimeStamp%20asc\r%0Awhere%20!(put200%20==%20False%20and%20Put202%20==%20False%20and%20Patch200%20==%20False%20and%20Patch202%20==%20False%20and%20Delete200%20==%20False%20and%20Delete202%20==%20False%20and%20FastPatch200%20==%20False%20and%20FastPatch202%20==%20False%20and%20MoveW%20==%20False%20and%20MoveD%20==%20False)\r%0A//where%20rg%20!=%20null%20%26%26%20rg.containsi(\"FastPatch202\")\r%0A",
          "lookback": "01:00:00",
          "maxResultRowCount": 15,
          "maxRowCount": 500000,
          "mdsEndpoint": "https://production.diagnostics.monitoring.core.windows.net/",
          "preIncidentQueryTimeout": "00:00:50",
          "serverQuery": "(properties.ContainsI(\"zarttestrg\")) and (activityName.EqualsI(\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"))",
          "serverQuerySimpleConditions": [
            {
              "comparand": "properties",
              "operator": "contains",
              "values": "zarttestrg"
            },
            {
              "comparand": "activityName",
              "operator": "==",
              "values": "EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync"
            }
          ],
          "startTime": null,
          "stepback": "00:00:00",
          "title": "Runners notification in euap (Copy)",
          "type": "DGrep",
          "uxParameters": [
            {
              "key": "aggregatesVisible",
              "value": true
            },
            {
              "key": "aggregates",
              "value": [
                "Count by activityName",
                "Count by service",
                "Count by Environment",
                "Count by action",
                "Count by SlimResourceType",
                "Count by Resp_ContentLength"
              ]
            },
            {
              "key": "chartsVisible",
              "value": true
            },
            {
              "key": "chartEditorVisible",
              "value": true
            },
            {
              "key": "chartType",
              "value": "Column"
            },
            {
              "key": "chartLayers",
              "value": [
                [
                  "Put200",
                  "where put200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Put202",
                  "where Put202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch200",
                  "where Patch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch202",
                  "where Patch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete200",
                  "where Delete200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete202",
                  "where Delete202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch200",
                  "where FastPatch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch202",
                  "where FastPatch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveW",
                  "where MoveW == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveD",
                  "where MoveD == True\ngroupby Environment\nlet Count = Count()"
                ]
              ]
            },
            {
              "key": "UTC",
              "value": false
            }
          ]
        }
      ],
      "customMessage": "",
      "customTitle": "[CanarayNotReachedByRunner] CanaryRunnerTypeEnvironement is unhealthy.",
      "dashboardName": "",
      "dashboardNamespace": "",
      "description": "Happens if no notifications are reaching canary region.\nCan happen if scale factor was changed to a very small number (false alarm)\nOr when deployment created a regression (need investigation)\n(updated to create only 1 icm",
      "desiredConditions": null,
      "eventIdentifier": {
        "component": "RunnersHealth",
        "id": "ResourcesRunners",
        "tenant": "AzureResourcesTopology"
      },
      "explicitPreAgg": null,
      "frequency": "00:30:00",
      "healthyCountToMitigateIncident": 3,
      "healthyDurationToMitigateIncident": "01:00:00",
      "hintsLookbackDuration": "1.00:00:00",
      "id": "CanarayNotReachedByRunner",
      "ingestionDelay": "00:00:00",
      "inputResourceType": "",
      "isDisabled": true,
      "isRegularMonitor": true,
      "isSilent": false,
      "isThrottled": false,
      "lastUpdatedBy": "ilidemi",
      "lastUpdateTime": "2020-03-31T02:21:14.8784502Z",
      "lookbackDuration": "04:00:00",
      "metadata": [
        {
          "metadataKey": "Icm.CorrelationId",
          "metadataValue": "resource://azureresourcestopology/canaryrunnertypeenvironement/eus2euap:canaraynotreachedbyrunner:sev4"
        }
      ],
      "metricsViewName": "",
      "monitorActorConfiguration": {
        "additionalDataForMonitorsEnabled": false,
        "azureCacheTimeToExclude": "00:00:00",
        "baselineConcurrentGetAnomalyCallsV2": 0,
        "baselineFastServiceUri": null,
        "baselineFastServiceUriForAzure": null,
        "baselineIsAnomalyBatchProcessingSize": 0,
        "baselineServiceUri": null,
        "baselineServiceUriForAzure": null,
        "baselineServiceUseQueryService": false,
        "baselineUiFacingServiceUri": null,
        "baselineUiFacingServiceUriForAzure": null,
        "baseReportExpirationTimeInSeconds": 0,
        "batchReportingMonitor": false,
        "cacheTimeToExclude": "00:00:00",
        "cadMaxCombinationsEvaluationThreshold": 0,
        "certificateIdentifier": null,
        "certificateThumbprint": null,
        "combinationDeltaFetchLookback": "00:00:00",
        "combinationRefreshMinInterval": "00:00:00",
        "combinationsChunkSizePerConcurrentEvaluateBlock": 0,
        "consecutiveMonitorTimeoutsForAlerting": 0,
        "customizeSeverityForMonitorExecutionFailure": false,
        "debug": false,
        "disabled": false,
        "disableMetricDataInAlerts": false,
        "dqConcurrencyConfiguration": null,
        "dynamicThresholdMaxCombinationsEvaluationThreshold": 0,
        "enableCombinationsThrottlingForCad": false,
        "enableCostReporting": false,
        "enableDictionaryBasedMetricsSourceMatching": false,
        "enableGroupingByCommonDimensions": false,
        "enableHealthMonitors": false,
        "enableMonitorTimeoutAlerts": false,
        "enableQueryServiceQosMetricSupport": false,
        "enableSelectPreaggregate": false,
        "enableSubmitMetricsFromJs": false,
        "evaluatorTimeout": "00:00:00",
        "fetchDeltaHints": false,
        "hasUserConfigCacheTimeToExclude": null,
        "hintLookbackDuration": "00:00:00",
        "includeTimeSeriesInformationInWatchdogMetadata": false,
        "isThirdPartyStamp": false,
        "kenshoServiceUri": null,
        "logCombinationsInfo": false,
        "maxBufferSizeForRetrievedData": 0,
        "maxCombinationsCountPerPartition": 0,
        "maxCombinationsEvaluationThreshold": 0,
        "maxCombinationsForDataSources": 0,
        "maxCombinationsForMetricSources": 0,
        "maxConcurrentRetrieveOperations": 0,
        "maxDegreeOfParallelismForEvaluateBlock": 0,
        "maxFetchMetricsInJs": 0,
        "minCombinationsCountToRequirePartition": 0,
        "notQueryMetricsSourceCombinationIfNoWildcard": false,
        "overrideHealthDataValidation": false,
        "overrideMetricDataValidation": false,
        "partnerClientCertificateIdentifier": null,
        "preferMetricsStore": false,
        "preventCombinationsOverwriteByDeltaRefresh": false,
        "previewWithHistoricData": false,
        "removeExtraIngestionDelayInExecution": false,
        "removeExtraQueryComparison": false,
        "resourceTypeOverride": null,
        "treatInheritNotAsWildcard": false,
        "useAccountMigrationSupport": false,
        "useDefaultAzureMonitorLatency": false,
        "useHealthService": false,
        "useInternalHintingApi": false,
        "useLatestQueryRequestSerializationVersion": false,
        "useLowLatencyPipelineDataQualityForAzureMonitor": false,
        "useMetricsStoreMigrationSupport": false,
        "useNewHintingApi": false,
        "useNewMonitorTemplateInterface": false,
        "useNewMonitorTemplateInterfaceForDynamicThreshold": false,
        "useOptimizedMetricFetch": false,
        "useQueryServiceBatching": false,
        "useQueryServiceBatchingForJs": false,
        "useQueryServiceForCrossStampQuery": false,
        "useQueryServiceInMdmDataQualityClient": false,
        "useResolutionForAnomalyTimeWindowLookback": false,
        "zeroAsNoValueSentinel": false
      },
      "monitorDataSourceType": 0,
      "raiseIncientOnMonitorFailure": null,
      "resourceType": "CanaryRunnerTypeEnvironement",
      "severityForMonitorFailure": 0,
      "shouldMitigateIncident": false,
      "shouldSendToAutomation": false,
      "templateSpecificParameters": {
        "metric": "Count"
      },
      "templateType": 2,
      "tenantName": "",
      "thresholds": [
        {
          "comparator": "==",
          "healthStatus": 1,
          "severity": 4,
          "value": 0.0
        }
      ],
      "version": 9
    },
    {
      "category": "",
      "conditions": [
        [
          "RunnerType",
          "*",
          ""
        ]
      ],
      "customLinks": [
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DGrepJarvisLink, Microsoft.Online.Metrics.Common",
          "autoExecute": true,
          "clientQuery": "orderby service asc\r\nwhere service == \"PartialSyncIngestionService\"\r\n//where properties != null && properties.containsi(\"RetryPriority=[Arm]\")\r\n\r\n\r\nlet action = Regex.Match(properties,\"\"\"action\"\": \"\"(.*?)\"\"\").groups[1].value\r\nlet SlimResourceType = Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r\nlet NeedDelayedRetry = Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r\nlet rg = Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r\n\r\nlet Resp_ContentLength = Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r\n\r\n\r\nlet put200 = (SlimResourceType == \"Microsoft.StreamAnalytics/streamingjobs\" and action == \"Write\" and rg == \"zarttestrgPut200\")\r\nlet Put202 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPut202\"\r\nlet Patch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgPatch200\"\r\nlet Patch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\" and rg == \"zarttestrgPatch202\" \r\nlet Delete200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgDelete200\"\r\nlet Delete202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Delete\" and rg == \"zarttestrgDelete202\"\r\nlet FastPatch200 = SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\" and rg == \"zarttestrgFastPatch200\"\r\nlet FastPatch202= SlimResourceType == \"Microsoft.Compute/disks\" and action == \"Write\"  and rg == \"zarttestrgFastPatch202\"\r\n\r\n//Move = storage + write + delete + zarttestrgsource and  zarttestrgtarget\r\nlet MoveW =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Write\"  and rg == \"zarttestrgtarget\"\r\nlet MoveD =  SlimResourceType == \"Microsoft.Storage/storageAccounts\" and action == \"Delete\" and rg == \"zarttestrgsource\"\r\norderby Patch202 desc\r\nwhere !(put200 == False and Put202 == False and Patch200 == False and Patch202 == False and Delete200 == False and Delete202 == False and FastPatch200 == False and FastPatch202 == False and MoveW == False and MoveD == False)\r\n//where rg != null && rg.containsi(\"FastPatch202\")\r\n",
          "dGrepEndpoint": "https://dgrepv2-frontend-prod.trafficmanager.net/",
          "endpointAlias": "Diagnostics PROD",
          "endTime": "{EndTime}",
          "eventFilters": [
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityCompleted",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            }
          ],
          "eventInfos": null,
          "executionDelay": "00:01:00",
          "identityColumns": {
            "Environment": [
              "eus2euap",
              "Eus",
              "Sea",
              "Weu"
            ]
          },
          "jarvisPathAndQuery": "?page=logs&be=DGrep&time={EndTime}&offset=-1&offsetUnit=Hours&ep=Diagnostics%20PROD&ns=ResourceTopology&en=ActivityCompleted&conditions=[[\"properties\",\"contains\",\"zarttestrg\"],[\"activityName\",\"==\",\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"]]&scopingConditions=[[\"Environment\",\"eus2euap,Eus,Sea,Weu\"]]&aggregatesVisible=true&aggregates=[\"Count%20by%20activityName\",\"Count%20by%20service\",\"Count%20by%20Environment\",\"Count%20by%20action\",\"Count%20by%20SlimResourceType\",\"Count%20by%20Resp_ContentLength\"]&chartsVisible=true&chartEditorVisible=true&chartType=Column&chartLayers=[[\"Put200\",\"where%20put200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Put202\",\"where%20Put202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch200\",\"where%20Patch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Patch202\",\"where%20Patch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete200\",\"where%20Delete200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"Delete202\",\"where%20Delete202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch200\",\"where%20FastPatch200%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"FastPatch202\",\"where%20FastPatch202%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveW\",\"where%20MoveW%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"],[\"MoveD\",\"where%20MoveD%20==%20True\\ngroupby%20Environment\\nlet%20Count%20=%20Count()\"]]&UTC=false&clientQuery=orderby%20service%20asc\r%0Awhere%20service%20==%20\"PartialSyncIngestionService\"\r%0A//where%20properties%20!=%20null%20%26%26%20properties.containsi(\"RetryPriority=[Arm]\")\r%0A\r%0A\r%0Alet%20action%20=%20Regex.Match(properties,\"\"\"action\"\":%20\"\"(.*?)\"\"\").groups[1].value\r%0Alet%20SlimResourceType%20=%20Regex.Match(properties,\"/subscriptions/.*/(.*?/.*)/zar\").groups[1].value\r%0Alet%20NeedDelayedRetry%20=%20Regex.Match(properties,\"NeedDelayedRetry=\\[(.*?)\\]\").groups[1].value\r%0Alet%20rg%20=%20Regex.Match(properties,\"/resourceGroups/(.*?)/\").groups[1].value\r%0A\r%0Alet%20Resp_ContentLength%20=%20Regex.Match(properties,\"Resp_ContentLength=\\[(.*?)\\]\").groups[1].value\r%0A\r%0A\r%0Alet%20put200%20=%20(SlimResourceType%20==%20\"Microsoft.StreamAnalytics/streamingjobs\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut200\")\r%0Alet%20Put202%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPut202\"\r%0Alet%20Patch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch200\"\r%0Alet%20Patch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgPatch202\"%20\r%0Alet%20Delete200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete200\"\r%0Alet%20Delete202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgDelete202\"\r%0Alet%20FastPatch200%20=%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20and%20rg%20==%20\"zarttestrgFastPatch200\"\r%0Alet%20FastPatch202=%20SlimResourceType%20==%20\"Microsoft.Compute/disks\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgFastPatch202\"\r%0A\r%0A//Move%20=%20storage%20+%20write%20+%20delete%20+%20zarttestrgsource%20and%20%20zarttestrgtarget\r%0Alet%20MoveW%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Write\"%20%20and%20rg%20==%20\"zarttestrgtarget\"\r%0Alet%20MoveD%20=%20%20SlimResourceType%20==%20\"Microsoft.Storage/storageAccounts\"%20and%20action%20==%20\"Delete\"%20and%20rg%20==%20\"zarttestrgsource\"\r%0Aorderby%20Patch202%20desc\r%0Awhere%20!(put200%20==%20False%20and%20Put202%20==%20False%20and%20Patch200%20==%20False%20and%20Patch202%20==%20False%20and%20Delete200%20==%20False%20and%20Delete202%20==%20False%20and%20FastPatch200%20==%20False%20and%20FastPatch202%20==%20False%20and%20MoveW%20==%20False%20and%20MoveD%20==%20False)\r%0A//where%20rg%20!=%20null%20%26%26%20rg.containsi(\"FastPatch202\")\r%0A",
          "lookback": "01:00:00",
          "maxResultRowCount": 15,
          "maxRowCount": 500000,
          "mdsEndpoint": "https://production.diagnostics.monitoring.core.windows.net/",
          "preIncidentQueryTimeout": "00:00:50",
          "serverQuery": "(properties.ContainsI(\"zarttestrg\")) and (activityName.EqualsI(\"EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync\"))",
          "serverQuerySimpleConditions": [
            {
              "comparand": "properties",
              "operator": "contains",
              "values": "zarttestrg"
            },
            {
              "comparand": "activityName",
              "operator": "==",
              "values": "EventHubMessageProcessingStrategyBase.ProcessEventHubMessageAsync"
            }
          ],
          "startTime": null,
          "stepback": "00:00:00",
          "title": "Runner notifications",
          "type": "DGrep",
          "uxParameters": [
            {
              "key": "aggregatesVisible",
              "value": true
            },
            {
              "key": "aggregates",
              "value": [
                "Count by activityName",
                "Count by service",
                "Count by Environment",
                "Count by action",
                "Count by SlimResourceType",
                "Count by Resp_ContentLength"
              ]
            },
            {
              "key": "chartsVisible",
              "value": true
            },
            {
              "key": "chartEditorVisible",
              "value": true
            },
            {
              "key": "chartType",
              "value": "Column"
            },
            {
              "key": "chartLayers",
              "value": [
                [
                  "Put200",
                  "where put200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Put202",
                  "where Put202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch200",
                  "where Patch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Patch202",
                  "where Patch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete200",
                  "where Delete200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "Delete202",
                  "where Delete202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch200",
                  "where FastPatch200 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "FastPatch202",
                  "where FastPatch202 == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveW",
                  "where MoveW == True\ngroupby Environment\nlet Count = Count()"
                ],
                [
                  "MoveD",
                  "where MoveD == True\ngroupby Environment\nlet Count = Count()"
                ]
              ]
            },
            {
              "key": "UTC",
              "value": false
            }
          ]
        }
      ],
      "customMessage": "",
      "customTitle": "",
      "dashboardName": "",
      "dashboardNamespace": "",
      "description": "Happens when one type of notification is not reaching any regions.\nNeeds to be investigated as it can show a regression for a certain type of notifications",
      "desiredConditions": null,
      "eventIdentifier": {
        "component": "RunnersHealth",
        "id": "ResourcesRunners",
        "tenant": "AzureResourcesTopology"
      },
      "explicitPreAgg": null,
      "frequency": "00:30:00",
      "healthyCountToMitigateIncident": 3,
      "healthyDurationToMitigateIncident": "01:00:00",
      "hintsLookbackDuration": "1.00:00:00",
      "id": "RunnerTypeNotReachingAnyRegion",
      "ingestionDelay": "00:00:00",
      "inputResourceType": "",
      "isDisabled": false,
      "isRegularMonitor": true,
      "isSilent": false,
      "isThrottled": false,
      "lastUpdatedBy": "ilidemi",
      "lastUpdateTime": "2020-06-06T02:17:19.8289594Z",
      "lookbackDuration": "01:30:00",
      "metadata": [],
      "metricsViewName": "",
      "monitorActorConfiguration": {
        "additionalDataForMonitorsEnabled": false,
        "azureCacheTimeToExclude": "00:00:00",
        "baselineConcurrentGetAnomalyCallsV2": 0,
        "baselineFastServiceUri": null,
        "baselineFastServiceUriForAzure": null,
        "baselineIsAnomalyBatchProcessingSize": 0,
        "baselineServiceUri": null,
        "baselineServiceUriForAzure": null,
        "baselineServiceUseQueryService": false,
        "baselineUiFacingServiceUri": null,
        "baselineUiFacingServiceUriForAzure": null,
        "baseReportExpirationTimeInSeconds": 0,
        "batchReportingMonitor": false,
        "cacheTimeToExclude": "00:00:00",
        "cadMaxCombinationsEvaluationThreshold": 0,
        "certificateIdentifier": null,
        "certificateThumbprint": null,
        "combinationDeltaFetchLookback": "00:00:00",
        "combinationRefreshMinInterval": "00:00:00",
        "combinationsChunkSizePerConcurrentEvaluateBlock": 0,
        "consecutiveMonitorTimeoutsForAlerting": 0,
        "customizeSeverityForMonitorExecutionFailure": false,
        "debug": false,
        "disabled": false,
        "disableMetricDataInAlerts": false,
        "dqConcurrencyConfiguration": null,
        "dynamicThresholdMaxCombinationsEvaluationThreshold": 0,
        "enableCombinationsThrottlingForCad": false,
        "enableCostReporting": false,
        "enableDictionaryBasedMetricsSourceMatching": false,
        "enableGroupingByCommonDimensions": false,
        "enableHealthMonitors": false,
        "enableMonitorTimeoutAlerts": false,
        "enableQueryServiceQosMetricSupport": false,
        "enableSelectPreaggregate": false,
        "enableSubmitMetricsFromJs": false,
        "evaluatorTimeout": "00:00:00",
        "fetchDeltaHints": false,
        "hasUserConfigCacheTimeToExclude": null,
        "hintLookbackDuration": "00:00:00",
        "includeTimeSeriesInformationInWatchdogMetadata": false,
        "isThirdPartyStamp": false,
        "kenshoServiceUri": null,
        "logCombinationsInfo": false,
        "maxBufferSizeForRetrievedData": 0,
        "maxCombinationsCountPerPartition": 0,
        "maxCombinationsEvaluationThreshold": 0,
        "maxCombinationsForDataSources": 0,
        "maxCombinationsForMetricSources": 0,
        "maxConcurrentRetrieveOperations": 0,
        "maxDegreeOfParallelismForEvaluateBlock": 0,
        "maxFetchMetricsInJs": 0,
        "minCombinationsCountToRequirePartition": 0,
        "notQueryMetricsSourceCombinationIfNoWildcard": false,
        "overrideHealthDataValidation": false,
        "overrideMetricDataValidation": false,
        "partnerClientCertificateIdentifier": null,
        "preferMetricsStore": false,
        "preventCombinationsOverwriteByDeltaRefresh": false,
        "previewWithHistoricData": false,
        "removeExtraIngestionDelayInExecution": false,
        "removeExtraQueryComparison": false,
        "resourceTypeOverride": null,
        "treatInheritNotAsWildcard": false,
        "useAccountMigrationSupport": false,
        "useDefaultAzureMonitorLatency": false,
        "useHealthService": false,
        "useInternalHintingApi": false,
        "useLatestQueryRequestSerializationVersion": false,
        "useLowLatencyPipelineDataQualityForAzureMonitor": false,
        "useMetricsStoreMigrationSupport": false,
        "useNewHintingApi": false,
        "useNewMonitorTemplateInterface": false,
        "useNewMonitorTemplateInterfaceForDynamicThreshold": false,
        "useOptimizedMetricFetch": false,
        "useQueryServiceBatching": false,
        "useQueryServiceBatchingForJs": false,
        "useQueryServiceForCrossStampQuery": false,
        "useQueryServiceInMdmDataQualityClient": false,
        "useResolutionForAnomalyTimeWindowLookback": false,
        "zeroAsNoValueSentinel": false
      },
      "monitorDataSourceType": 0,
      "raiseIncientOnMonitorFailure": null,
      "resourceType": "RunnerType",
      "severityForMonitorFailure": 0,
      "shouldMitigateIncident": false,
      "shouldSendToAutomation": false,
      "templateSpecificParameters": {
        "metric": "Count"
      },
      "templateType": 2,
      "tenantName": "",
      "thresholds": [
        {
          "comparator": "<",
          "healthStatus": 1,
          "severity": 3,
          "value": 3.0
        }
      ],
      "version": 7
    }
  ],
  "pendingMetricsOrderingFix": false,
  "preferQueryMetricsStore": null,
  "replicationState": 0,
  "tenant": "AzureResourcesTopology",
  "treatMissingSeriesAsZeros": false,
  "version": 0,
  "views": null
}