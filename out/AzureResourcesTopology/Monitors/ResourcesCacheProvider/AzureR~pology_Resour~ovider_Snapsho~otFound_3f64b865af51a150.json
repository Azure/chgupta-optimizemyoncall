{
  "bv": 10,
  "component": "ResourcesCacheProvider",
  "computedMetrics": null,
  "deleted": false,
  "description": null,
  "dimensions": null,
  "displayName": null,
  "enableClientEtwPublication": true,
  "enableClientSideForking": true,
  "enableClientSideLastSamplingMode": false,
  "enableClientSidePublication": true,
  "id": "SnapshotNotFound",
  "isFromNewPipeline": false,
  "isQosMetric": false,
  "metrics": null,
  "monitors": [
    {
      "category": "Normalizer",
      "conditions": [
        [
          "Environment",
          "*",
          ""
        ],
        [
          "Service",
          "IngestionWorkerService",
          ""
        ],
        [
          "RetryLeft",
          "false",
          ""
        ]
      ],
      "customLinks": [
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DashboardConfiguration, Microsoft.Online.Metrics.Common",
          "accountName": "AzureResourcesTopology",
          "autoExecute": false,
          "dimensionsToOverride": [],
          "executionDelay": "00:00:00",
          "lookbackDuration": "1.00:00:00",
          "name": null,
          "namespace": null,
          "path": [
            "ARG Write Path",
            "Ingestion"
          ],
          "preIncidentQueryTimeout": "00:00:50",
          "title": "Ingestion",
          "type": "Dashboard"
        },
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DashboardConfiguration, Microsoft.Online.Metrics.Common",
          "accountName": "AzureResourcesTopology",
          "autoExecute": false,
          "dimensionsToOverride": [],
          "executionDelay": "00:00:00",
          "lookbackDuration": "1.00:00:00",
          "name": null,
          "namespace": null,
          "path": [
            "ARG Write Path",
            "Ingestion failures"
          ],
          "preIncidentQueryTimeout": "00:00:50",
          "title": "Ingestion failures",
          "type": "Dashboard"
        },
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DashboardConfiguration, Microsoft.Online.Metrics.Common",
          "accountName": "AzureResourcesTopology",
          "autoExecute": true,
          "dimensionsToOverride": [],
          "executionDelay": "00:00:00",
          "lookbackDuration": "2.00:00:00",
          "name": null,
          "namespace": null,
          "path": [
            "ARG Livesite",
            "SnapshotNotFound"
          ],
          "preIncidentQueryTimeout": "00:00:50",
          "title": "Cosmos write failure creating snapshotnotfound",
          "type": "Dashboard"
        },
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DGrepJarvisLink, Microsoft.Online.Metrics.Common",
          "autoExecute": false,
          "clientQuery": "let ScopeId = Regex.Match(properties, \"ScopeId=\\[([^\\]]+)\\]\").Groups[1].Value\nselect TIMESTAMP, ScopeId, properties\norderby TIMESTAMP asc",
          "dGrepEndpoint": "https://dgrepv2-frontend-prod.trafficmanager.net/",
          "endpointAlias": "Diagnostics PROD",
          "endTime": "{EndTime}",
          "eventFilters": [
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityFailed",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            }
          ],
          "eventInfos": null,
          "executionDelay": "00:01:00",
          "identityColumns": {
            "Environment": [
              "{Monitor.Dimension.Environment}"
            ],
            "Role": [
              "nt0art"
            ]
          },
          "jarvisPathAndQuery": "?page=logs&be=DGrep&time={EndTime}&offset=~10&offsetUnit=Minutes&ep=Diagnostics%20PROD&ns=ResourceTopology&en=ActivityFailed&conditions=[[\"activityName\",\"contains\",\"ValidationCheckJobValidityHandler.ExecuteAsync\"]]&scopingConditions=[[\"Environment\",\"{Monitor.Dimension.Environment}\"],[\"Role\",\"nt0art\"]]&aggregatesVisible=true&aggregates=[\"Count%20by%20ScopeId\"]&chartsVisible=false&chartEditorVisible=true&chartType=Line&chartLayers=[[\"New%20Layer\",\"\"]]&UTC=false&clientQuery=let%20ScopeId%20=%20Regex.Match(properties,%20\"ScopeId=\\[([^\\]]+)\\]\").Groups[1].Value%0Aselect%20TIMESTAMP,%20ScopeId,%20properties%0Aorderby%20TIMESTAMP%20asc",
          "lookback": "00:20:00",
          "maxResultRowCount": 15,
          "maxRowCount": 500000,
          "mdsEndpoint": "https://production.diagnostics.monitoring.core.windows.net/",
          "preIncidentQueryTimeout": "00:00:50",
          "serverQuery": "activityName.ContainsI(\"ValidationCheckJobValidityHandler.ExecuteAsync\")",
          "serverQuerySimpleConditions": [
            {
              "comparand": "activityName",
              "operator": "contains",
              "values": "ValidationCheckJobValidityHandler.ExecuteAsync"
            }
          ],
          "startTime": null,
          "stepback": "-00:10:00",
          "title": "Impacted Scope Ids",
          "type": "DGrep",
          "uxParameters": [
            {
              "key": "aggregatesVisible",
              "value": true
            },
            {
              "key": "aggregates",
              "value": [
                "Count by ScopeId"
              ]
            },
            {
              "key": "chartsVisible",
              "value": false
            },
            {
              "key": "chartEditorVisible",
              "value": true
            },
            {
              "key": "chartType",
              "value": "Line"
            },
            {
              "key": "chartLayers",
              "value": [
                [
                  "New Layer",
                  ""
                ]
              ]
            },
            {
              "key": "UTC",
              "value": false
            }
          ]
        },
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DGrepJarvisLink, Microsoft.Online.Metrics.Common",
          "autoExecute": false,
          "clientQuery": "// This query is very slow and often throttled. So use this as a base for your scenario \n\nlet SchedulePlan = Regex.Match(properties, \" SchedulePlan=\\[([^\\]]+)\\]\").Groups[1].Value",
          "dGrepEndpoint": "https://dgrepv2-frontend-prod.trafficmanager.net/",
          "endpointAlias": "Diagnostics PROD",
          "endTime": "{EndTime}",
          "eventFilters": [
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityCompleted",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            }
          ],
          "eventInfos": null,
          "executionDelay": "00:01:00",
          "identityColumns": {
            "Environment": [
              "{Monitor.Dimension.Environment}"
            ],
            "Role": [
              "nt0art"
            ]
          },
          "jarvisPathAndQuery": "?page=logs&be=DGrep&time={EndTime}&offset=-30&offsetUnit=Hours&ep=Diagnostics%20PROD&ns=ResourceTopology&en=ActivityCompleted&conditions=[[\"service\",\"==\",\"ResourcesSyncScheduler\"],[\"activityName\",\"contains\",\"ScopeIdScheduledTimeProvider.IsScheduledInIntervalAsync\"],[\"properties\",\"!contains\",\"LastScheduleTime\"],[\"properties\",\"contains\",\"{ScopeId}\"]]&scopingConditions=[[\"Environment\",\"{Monitor.Dimension.Environment}\"],[\"Role\",\"nt0art\"]]&aggregatesVisible=true&aggregates=[\"Count%20by%20SchedulePlan\"]&chartsVisible=false&chartEditorVisible=true&chartType=Line&chartLayers=[[\"New%20Layer\",\"\"]]&UTC=false&clientQuery=//%20This%20query%20is%20very%20slow%20and%20often%20throttled.%20So%20use%20this%20as%20a%20base%20for%20your%20scenario%20%0A%0Alet%20SchedulePlan%20=%20Regex.Match(properties,%20\"%20SchedulePlan=\\[([^\\]]+)\\]\").Groups[1].Value",
          "lookback": "1.06:00:00",
          "maxResultRowCount": 15,
          "maxRowCount": 500000,
          "mdsEndpoint": "https://production.diagnostics.monitoring.core.windows.net/",
          "preIncidentQueryTimeout": "00:00:50",
          "serverQuery": "(service.EqualsI(\"ResourcesSyncScheduler\")) and (activityName.ContainsI(\"ScopeIdScheduledTimeProvider.IsScheduledInIntervalAsync\")) and (!properties.ContainsI(\"LastScheduleTime\")) and (properties.ContainsI(\"{ScopeId}\"))",
          "serverQuerySimpleConditions": [
            {
              "comparand": "service",
              "operator": "==",
              "values": "ResourcesSyncScheduler"
            },
            {
              "comparand": "activityName",
              "operator": "contains",
              "values": "ScopeIdScheduledTimeProvider.IsScheduledInIntervalAsync"
            },
            {
              "comparand": "properties",
              "operator": "!contains",
              "values": "LastScheduleTime"
            },
            {
              "comparand": "properties",
              "operator": "contains",
              "values": "{ScopeId}"
            }
          ],
          "startTime": null,
          "stepback": "00:00:00",
          "title": "[May be useful] : ScopeId not in ScopeIdScheduledTimeProvider",
          "type": "DGrep",
          "uxParameters": [
            {
              "key": "aggregatesVisible",
              "value": true
            },
            {
              "key": "aggregates",
              "value": [
                "Count by SchedulePlan"
              ]
            },
            {
              "key": "chartsVisible",
              "value": false
            },
            {
              "key": "chartEditorVisible",
              "value": true
            },
            {
              "key": "chartType",
              "value": "Line"
            },
            {
              "key": "chartLayers",
              "value": [
                [
                  "New Layer",
                  ""
                ]
              ]
            },
            {
              "key": "UTC",
              "value": false
            }
          ]
        },
        {
          "$type": "Microsoft.Online.Metrics.Common.EventConfiguration.DGrepJarvisLink, Microsoft.Online.Metrics.Common",
          "autoExecute": false,
          "clientQuery": "let ScopeId = Regex.Match(properties, \"ScopeId=\\[([^\\]]+)\\]\").Groups[1].Value\r\nlet SnapshotId = Regex.Match(properties, \"SnapshotId=\\[([^\\]]+)\\]\").Groups[1].Value\r\nlet DequeueCount = Regex.Match(properties, \"DequeueCount=\\[([^\\]]+)\\]\").Groups[1].Value\r\norderby elapsedMilliseconds asc\r\n\r\nselect TIMESTAMP, DequeueCount, SnapshotId, properties",
          "dGrepEndpoint": "https://dgrepv2-frontend-prod.trafficmanager.net/",
          "endpointAlias": "Diagnostics PROD",
          "endTime": "{EndTime}",
          "eventFilters": [
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityCompleted",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            },
            {
              "isScrubbed": false,
              "monikerRegex": null,
              "nameRegex": "ActivityFailed",
              "namespaceRegex": "ResourceTopology",
              "versionRegex": null
            }
          ],
          "eventInfos": null,
          "executionDelay": "00:01:00",
          "identityColumns": {
            "Environment": [
              "{Monitor.Dimension.Environment}"
            ],
            "Role": [
              "nt0art"
            ]
          },
          "jarvisPathAndQuery": "?page=logs&be=DGrep&time={EndTime}&offset=~30&offsetUnit=Minutes&ep=Diagnostics%20PROD&ns=ResourceTopology&en=ActivityCompleted,ActivityFailed&conditions=[[\"activityName\",\"==\",\"ValidationCheckJobValidityHandler.ExecuteAsync\"],[\"properties\",\"contains\",\"{scopeId}\"]]&scopingConditions=[[\"Environment\",\"{Monitor.Dimension.Environment}\"],[\"Role\",\"nt0art\"]]&aggregatesVisible=true&aggregates=[\"Count%20by%20SnapshotId\"]&chartsVisible=false&chartEditorVisible=true&chartType=Line&chartLayers=[[\"New%20Layer\",\"\"]]&UTC=false&clientQuery=let%20ScopeId%20=%20Regex.Match(properties,%20\"ScopeId=\\[([^\\]]+)\\]\").Groups[1].Value\r%0Alet%20SnapshotId%20=%20Regex.Match(properties,%20\"SnapshotId=\\[([^\\]]+)\\]\").Groups[1].Value\r%0Alet%20DequeueCount%20=%20Regex.Match(properties,%20\"DequeueCount=\\[([^\\]]+)\\]\").Groups[1].Value\r%0Aorderby%20elapsedMilliseconds%20asc\r%0A\r%0Aselect%20TIMESTAMP,%20DequeueCount,%20SnapshotId,%20properties",
          "lookback": "01:00:00",
          "maxResultRowCount": 15,
          "maxRowCount": 500000,
          "mdsEndpoint": "https://production.diagnostics.monitoring.core.windows.net/",
          "preIncidentQueryTimeout": "00:00:50",
          "serverQuery": "(activityName.EqualsI(\"ValidationCheckJobValidityHandler.ExecuteAsync\")) and (properties.ContainsI(\"{scopeId}\"))",
          "serverQuerySimpleConditions": [
            {
              "comparand": "activityName",
              "operator": "==",
              "values": "ValidationCheckJobValidityHandler.ExecuteAsync"
            },
            {
              "comparand": "properties",
              "operator": "contains",
              "values": "{scopeId}"
            }
          ],
          "startTime": null,
          "stepback": "-00:30:00",
          "title": "Scope Id in Normalizer queue ",
          "type": "DGrep",
          "uxParameters": [
            {
              "key": "aggregatesVisible",
              "value": true
            },
            {
              "key": "aggregates",
              "value": [
                "Count by SnapshotId"
              ]
            },
            {
              "key": "chartsVisible",
              "value": false
            },
            {
              "key": "chartEditorVisible",
              "value": true
            },
            {
              "key": "chartType",
              "value": "Line"
            },
            {
              "key": "chartLayers",
              "value": [
                [
                  "New Layer",
                  ""
                ]
              ]
            },
            {
              "key": "UTC",
              "value": false
            }
          ]
        }
      ],
      "customMessage": "",
      "customTitle": "",
      "dashboardName": "",
      "dashboardNamespace": "",
      "description": "Monitor is looking for subscriptions which are put in queue \"fullsyncmessagequeue\" by Scheduler, but weren't added to ScopeSnapshots cosmos DB.\nThis job t is added to prevent double scheduling.\nFirst look at the Cosmos write failure creating snapshotnotfound dashboard widget. As it displays the failure to write in cosmos, resulting in snapshots not found.\n\nIt will create an incident only in cases, when we failed all retry and won't retry anymore.\n__________________________________________________________________\nAction plan:\n1. Get impacted scopeIds (See attached query)\n2. For scope, look how many times we put that scope to queue (Paste scope Id in the another attached query \"Scope Id in Normalizer queue\").\n\n2.1. If for that scope we have only one SnapshotId\nWe lost some ScopeSnapshots from CosmosDb. But we have them in the ScopeIdScheduledTimeProvider (InMemoryCache which store ScopeSnapshots locally). \nMitigation:\n-manually schedule such scopes via controller h ttps://localhost/proxy/admin/scheduler?action=ScheduleSync&tenantId=72F988BF-86F1-41AF-91AB-2D7CD011db47&subscriptionId=07f4bc00-d286-4db1-a160-7893c848a6a5 (CHECK BEFORE APPLYING)\nOR\n-restart scheduler\n\n2.2. If we have that scope with several snapshots and one of them was completed with success \nSomething is going on with Scheduler and we didn't add scopeSnapshot for that scopeId .\n-If there are many such scope, we have a problem in Scheduler.\n-Otherwise, it will self recover. No actions.",
      "desiredConditions": null,
      "eventIdentifier": {
        "component": "ResourcesCacheProvider",
        "id": "SnapshotNotFound",
        "tenant": "AzureResourcesTopology"
      },
      "explicitPreAgg": null,
      "frequency": "00:03:00",
      "healthyCountToMitigateIncident": 3,
      "healthyDurationToMitigateIncident": "00:06:00",
      "hintsLookbackDuration": "1.00:00:00",
      "id": "SnapshotNotFound",
      "ingestionDelay": "00:00:00",
      "inputResourceType": "",
      "isDisabled": false,
      "isRegularMonitor": true,
      "isSilent": false,
      "isThrottled": false,
      "lastUpdatedBy": "rchapas",
      "lastUpdateTime": "2020-04-01T17:25:56.1716586Z",
      "lookbackDuration": "00:05:00",
      "metadata": [],
      "metricsViewName": "",
      "monitorActorConfiguration": {
        "additionalDataForMonitorsEnabled": false,
        "azureCacheTimeToExclude": "00:00:00",
        "baselineConcurrentGetAnomalyCallsV2": 0,
        "baselineFastServiceUri": null,
        "baselineFastServiceUriForAzure": null,
        "baselineIsAnomalyBatchProcessingSize": 0,
        "baselineServiceUri": null,
        "baselineServiceUriForAzure": null,
        "baselineServiceUseQueryService": false,
        "baselineUiFacingServiceUri": null,
        "baselineUiFacingServiceUriForAzure": null,
        "baseReportExpirationTimeInSeconds": 0,
        "batchReportingMonitor": false,
        "cacheTimeToExclude": "00:00:00",
        "cadMaxCombinationsEvaluationThreshold": 0,
        "certificateIdentifier": null,
        "certificateThumbprint": null,
        "combinationDeltaFetchLookback": "00:00:00",
        "combinationRefreshMinInterval": "00:00:00",
        "combinationsChunkSizePerConcurrentEvaluateBlock": 0,
        "consecutiveMonitorTimeoutsForAlerting": 0,
        "customizeSeverityForMonitorExecutionFailure": false,
        "debug": false,
        "disabled": false,
        "disableMetricDataInAlerts": false,
        "dqConcurrencyConfiguration": null,
        "dynamicThresholdMaxCombinationsEvaluationThreshold": 0,
        "enableCombinationsThrottlingForCad": false,
        "enableCostReporting": false,
        "enableDictionaryBasedMetricsSourceMatching": false,
        "enableGroupingByCommonDimensions": false,
        "enableHealthMonitors": false,
        "enableMonitorTimeoutAlerts": false,
        "enableQueryServiceQosMetricSupport": false,
        "enableSelectPreaggregate": false,
        "enableSubmitMetricsFromJs": false,
        "evaluatorTimeout": "00:00:00",
        "fetchDeltaHints": false,
        "hasUserConfigCacheTimeToExclude": null,
        "hintLookbackDuration": "00:00:00",
        "includeTimeSeriesInformationInWatchdogMetadata": false,
        "isThirdPartyStamp": false,
        "kenshoServiceUri": null,
        "logCombinationsInfo": false,
        "maxBufferSizeForRetrievedData": 0,
        "maxCombinationsCountPerPartition": 0,
        "maxCombinationsEvaluationThreshold": 0,
        "maxCombinationsForDataSources": 0,
        "maxCombinationsForMetricSources": 0,
        "maxConcurrentRetrieveOperations": 0,
        "maxDegreeOfParallelismForEvaluateBlock": 0,
        "maxFetchMetricsInJs": 0,
        "minCombinationsCountToRequirePartition": 0,
        "notQueryMetricsSourceCombinationIfNoWildcard": false,
        "overrideHealthDataValidation": false,
        "overrideMetricDataValidation": false,
        "partnerClientCertificateIdentifier": null,
        "preferMetricsStore": false,
        "preventCombinationsOverwriteByDeltaRefresh": false,
        "previewWithHistoricData": false,
        "removeExtraIngestionDelayInExecution": false,
        "removeExtraQueryComparison": false,
        "resourceTypeOverride": null,
        "treatInheritNotAsWildcard": false,
        "useAccountMigrationSupport": false,
        "useDefaultAzureMonitorLatency": false,
        "useHealthService": false,
        "useInternalHintingApi": false,
        "useLatestQueryRequestSerializationVersion": false,
        "useLowLatencyPipelineDataQualityForAzureMonitor": false,
        "useMetricsStoreMigrationSupport": false,
        "useNewHintingApi": false,
        "useNewMonitorTemplateInterface": false,
        "useNewMonitorTemplateInterfaceForDynamicThreshold": false,
        "useOptimizedMetricFetch": false,
        "useQueryServiceBatching": false,
        "useQueryServiceBatchingForJs": false,
        "useQueryServiceForCrossStampQuery": false,
        "useQueryServiceInMdmDataQualityClient": false,
        "useResolutionForAnomalyTimeWindowLookback": false,
        "zeroAsNoValueSentinel": false
      },
      "monitorDataSourceType": 0,
      "raiseIncientOnMonitorFailure": null,
      "resourceType": "Service Health",
      "severityForMonitorFailure": 0,
      "shouldMitigateIncident": false,
      "shouldSendToAutomation": false,
      "templateSpecificParameters": {
        "metric": "Sum"
      },
      "templateType": 2,
      "tenantName": "",
      "thresholds": [
        {
          "comparator": ">",
          "healthStatus": 1,
          "severity": 3,
          "value": 0.0
        }
      ],
      "version": 17
    }
  ],
  "pendingMetricsOrderingFix": false,
  "preferQueryMetricsStore": null,
  "replicationState": 0,
  "tenant": "AzureResourcesTopology",
  "treatMissingSeriesAsZeros": false,
  "version": 0,
  "views": null
}